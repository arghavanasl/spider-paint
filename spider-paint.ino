#include <AFMotor.h>
#include <Servo.h>
const int stepsPerRevolution = 2038; //depends on the motor you are using

// connect motor to port #1(M1 and M2) and #2 (M3 and M4)
AF_Stepper motor1(stepsPerRevolution, 1);
AF_Stepper motor2(stepsPerRevolution, 2);

//create servo object to control a servo
Servo servo1;
int servoWritingPos = 155;
int servoPassingPos = 80;
#define  WRITING  1
#define  PASSING  0

float A = 177; //frame width (cm)
float B = 104; //frame height (cm)
float c = 12.5; //box width (cm)
float d = 4.5; 
const float pi = 3.1415926535898;

void toggleServo(int currentState)
{
  if(currentState == WRITING)
  {
    for(int i = servoWritingPos; i >= servoPassingPos; i--)
    {
      servo1.write(i);
      delay(25);
    }
  }
  else
  {
    for(int i = servoPassingPos; i <= servoWritingPos; i++)
    {
      servo1.write(i);
      delay(25);
    }
  }
}

float returnsX(float A, float c, float L1, float L2)
{
  float x = (L1*L1 - L2*L2 - A*A + A*c)/(c-A)/2;
  return x;
}

float returnsY(float A, float B, float c, float d, float L1, float L2)
{
  float x = (L1*L1 - L2*L2 - A*A + A*c)/(c-A)/2;
  float y = B - d - sqrt(L2*L2 - (x-c/2)*(x-c/2));
  return y;
}

float returnsL1(float x, float y, float A, float B, float c, float d)
{
    float L1squared;
    float L1;
    L1squared = (B - y - d)*(B - y - d) + (A - x - c/2)*(A - x - c/2);
    L1 = sqrt(L1squared);
    return L1;
}

float returnsL2(float x, float y, float A, float B, float c, float d)
{
    float L2squared;
    float L2;
    L2squared = (B - y - d)*(B - y - d) + (x - c/2)*(x - c/2);
    L2 = sqrt(L2squared);
    return L2;  
}
void setup()
{
  delay(5000);
  Serial.begin(9600);  
  motor1.setSpeed(10);  // 10 rpm   
  motor2.setSpeed(10);

  servo1.attach(10);
    
  float direction1;
  float direction2;
    
  float t = 1; //1 second takes to move 1 unit
  float r = 0.5;//cm

  //starting point 
  float x_start = 50;//cm
  float y_start = 30;//cm 

  //route arry determines the shape we are about to draw
  //for testing we set it manually
  //{x, y}
  int array_size = 20;
  
  //circle
  //double route_array[array_size][2] =  {{81, 54.3},{82, 56}, {83, 57}, {84, 57}, {85, 58.6}, {86, 59.1}, {87, 59.5}, {88, 59.7}, {89, 59.9}, {90, 60}, {91, 59.9}, {92, 59.7}, {93, 59.5}, {94, 59.1}, {95, 58.6}, {96, 58}, {97, 57}, {98, 56},{99, 54.3},{100, 50},{99, 45.6},{98, 44},{97, 42.8},{96, 42},{95, 41.3},{94, 40.7},{93, 40.4},{92, 40.2}, {91, 40.05},{90, 40}, {89, 40.05}, {88, 40.2}, {87, 40.4},{86, 40.7}, {85, 41.3}, {84, 42}, {83, 42.8},{82, 44}, {81, 45.6}, {80, 50}};
  //double route_array[array_size][2] =  {{79, 53}, {78, 53}, {77, 53}, {76, 53}, {75, 53}, {74, 53}, {73, 53}, {72, 53}, {71, 53}, {70, 53}, {69, 53}, {68, 53}, {67, 53}, {66, 53}, {65, 53}, {64, 53}, {63, 53}};
  //uint8_t route_array[array_size][2] = {{63,54},{63,55},{63,56},{63,57},{63,58},{63,59},{63,60},{63,61},{63,62},{63,63},{63,64},{63,65},{63,66},{63,67},{63,68},{63,69},{63,70},{63,71},{63,72},{63,73},{63,72},{63,71},{63,70},{63,69},{63,68},{63,67},{63,66},{63,65},{63,64},{63,63},{63,62},{63,61},{63,60},{63,59},{63,58},{63,57},{63,56},{63,55},{63,54},{63,53},{63,52},{63,51},{63,50},{63,49},{63,48},{63,47},{63,46},{63,45},{63,44},{63,43},{63,42},{63,41},{63,40},{63,39},{63,38},{63,37},{63,36},{63,35},{63,34},{63,33},{63,32},{63,31},{63,30},{63,29},{63,28},{63,27},{63,26},{63,25},{63,24},{64,25},{65,25},{66,26},{67,26},{68,27},{69,27},{70,28},{71,28},{72,29},{73,29},{74,30},{75,30},{76,31},{77,31},{78,32},{79,32},{80,33},{81,33},{82,34},{83,34},{84,35},{85,35},{86,36},{87,36},{88,37},{89,37},{90,38},{91,38},{92,39},{93,39},{94,40},{95,40},{96,41},{97,41},{98,42},{99,42},{100,43},{101,43},{102,44},{103,44},{104,45},{105,45},{106,46},{107,46},{108,47},{109,47},{110,48},{111,48},{111,49},{110,49},{109,50},{108,50},{107,51},{106,51},{105,52},{104,52},{103,53},{102,53},{101,54},{100,54},{99,55},{98,55},{97,56},{96,56},{95,57},{94,57},{93,58},{92,58},{91,59},{90,59},{89,60},{88,60},{87,61},{86,61},{85,62},{84,62},{83,63},{82,63},{81,64},{80,64},{79,65},{78,65},{77,66},{76,66},{75,67},{74,67},{73,68},{72,68},{71,69},{70,69},{69,70},{68,70},{67,71},{66,71},{65,72},{64,72}};
  //uint8_t route_array[array_size][2] = {{53,49},{54,50},{55,51},{56,52},{57,53},{58,54},{59,55},{60,55},{61,55},{62,55},{62,54},{61,53},{60,52},{59,51},{58,50},{57,49},{56,48},{55,47},{54,46},{53,45},{53,44},{53,43},{53,42},{54,42},{55,42},{56,42},{57,43},{58,44},{59,45},{60,46},{61,47},{62,48},{63,49},{64,50},{65,51},{66,52},{67,53},{68,54},{69,55},{69,54},{70,55},{71,55},{70,55},{69,54},{68,53},{68,53},{67,52},{68,51},{68,50},{69,49},{69,48},{68,47},{67,46},{66,45},{65,44},{64,43},{63,42},{62,42},{63,43},{64,42},{65,42},{66,42},{67,43},{68,43},{69,44},{70,44},{71,45},{72,46},{73,47},{74,48},{75,49},{76,50},{77,51},{78,52},{79,53},{80,54},{81,54},{82,53},{83,52},{84,53},{85,54},{86,54},{87,54},{88,54},{89,53},{90,52},{91,53},{92,54},{93,54},{94,54},{95,54},{96,53},{96,52},{95,51},{94,50},{93,49},{92,48},{91,47},{90,46},{89,45},{88,44},{88,43},{88,42},{89,42},{90,42},{91,42},{92,42},{93,42},{94,43},{95,44},{96,45},{97,46},{98,47},{99,48},{100,49},{101,50},{102,51},{103,52},{104,53},{105,54},{106,54},{107,54},{108,54},{109,54},{109,53},{109,52},{108,51},{107,50},{106,49},{105,48},{104,47},{103,47},{102,47},{101,47},{100,47},{99,46},{99,45},{99,44},{99,43},{100,42},{101,42},{102,42},{103,42},{104,42},{105,43},{106,44},{107,45},{108,46},{109,47},{110,48},{111,49},{110,49},{109,49},{108,49},{107,49},{106,49},{105,49},{104,49},{103,49},{102,49},{101,49},{100,49},{99,49},{98,49},{97,49},{96,49},{95,49},{94,49},{93,49},{92,49},{91,49},{90,50},{89,51},{89,51},{88,50},{87,49},{86,48},{85,47},{84,46},{83,45},{82,44},{81,43},{80,42},{79,42},{78,42},{77,42},{76,42},{75,42},{74,42},{73,42},{73,42},{74,43},{75,44},{76,45},{77,46},{78,47},{79,48},{80,49},{81,50},{82,51},{81,51},{80,51},{79,52},{78,53},{77,54},{76,55},{75,56},{74,57},{73,58},{72,59},{71,60},{70,61},{69,62},{69,62},{68,62},{68,61},{69,61}};
  
  //uint8_t route_array[array_size][2] = {{53,49},{53,48},{53,47},{53,46},{53,45},{53,44},{53,42},{53,41},{53,40},{53,39},{53,38},{53,37},{53,36},{53,35},{53,34},{53,33},{53,32},{53,31},{53,30},{54,31},{55,32},{56,33},{57,34},{58,35},{59,36},{60,37},{61,38},{62,39},{63,40},{64,41},{65,42},{66,43},{67,44},{68,45},{69,46},{70,47},{71,48},{72,49},{73,50},{74,49},{75,48},{76,47},{77,46},{78,45},{79,44},{80,43},{81,42},{82,41},{83,40},{84,39},{85,38},{86,37},{87,36},{88,35},{89,34},{90,33},{91,32},{92,31},{93,30},{93.5,31},{94,32},{94.5,33},{95,34},{95.5,35},{96,36},{96.5,37},{97,38},{97.5,39},{98,40},{98.5,41},{99,42},{99.5,43},{100,44},{100.5,45},{101,46},{101.5,47},{102,48},{102.5,49},{103,50},{103.5,49},{104,48},{104.5,47},{105,46},{105.5,45},{106,44},{106.5,43},{107,42},{107.5,41},{108,40},{108.5,39},{109,38},{109.5,37},{110,36},{110.5,35},{111,34},{111.5,33},{112,32},{112.5,31},{113,30}};
  
  //uint8_t route_array[array_size][2] = {{52.75,49.5},{52.5,49},{52.25,48.5},{52,48},{51.75,47.5},{51.5,47},{51.25,46.5},{51,46},{50.75,45.5},{50.5,45},{50.25,44.5},{50,44},{49.75,43.5},{49.5,43},{49.25,42.5},{49,42},{48.75,41.5},{48.5,41},{48.25,40.5},{48,40},{47.75,39.5},{47.5,39},{47.25,38.5},{47,38},{46.75,37.5},{46.5,37},{46.25,36.5},{46,36},{45.75,35.5},{45.5,35},{45.25,34.5},{45,34},{44.75,33.5},{44.5,33},{44.25,32.5},{44,32},{43.75,31.5},{43.5,31},{43.25,30.5},{43,30}};

  //rectangle
  //float route_array[array_size][2] ={{76.0,51.2},{76.0,51.0},{76.0,50.8},{76.0,50.6},{76.0,50.4},{76.0,50.2},{76.0,50.0},{76.0,49.8},{76.0,49.6},{76.0,49.4},{76.0,49.2},{76.0,49.0},{76.0,48.8},{76.0,48.6},{76.0,48.4},{76.0,48.2},{76.0,48.0},{76.0,47.8},{76.0,47.6},{76.0,47.4},{76.0,47.2},{76.0,47.0},{76.0,46.8},{76.0,46.6},{76.0,46.4},{76.0,46.2},{76.0,46.0},{76.0,45.8},{76.0,45.6},{76.0,45.4},{76.0,45.2},{76.0,45.0},{76.0,44.8},{76.0,44.6},{76.0,44.4},{76.0,44.2},{76.0,44.0},{76.0,43.8},{76.0,43.6},{76.0,43.4},{76.0,43.2},{76.0,43.0},{76.0,42.8},{76.0,42.6},{76.0,42.4},{76.2,42.2},{76.2,42.0},{76.4,41.8},{76.6,41.6},{76.8,41.6},{77.0,41.4},{77.2,41.4},{77.4,41.4},{77.6,41.4},{77.8,41.4},{78.0,41.4},{78.2,41.4},{78.4,41.4},{78.6,41.4},{78.8,41.4},{79.0,41.4},{79.2,41.4},{79.4,41.4},{79.6,41.4},{79.8,41.4},{80.0,41.4},{80.2,41.4},{80.4,41.4},{80.6,41.4},{80.8,41.4},{81.0,41.4},{81.2,41.4},{81.4,41.4},{81.6,41.4},{81.8,41.4},{82.0,41.4},{82.2,41.4},{82.4,41.4},{82.6,41.4},{82.8,41.4},{83.0,41.4},{83.2,41.4},{83.4,41.4},{83.6,41.4},{83.8,41.4},{84.0,41.4},{84.2,41.4},{84.4,41.4},{84.6,41.4},{84.8,41.4},{85.0,41.4},{85.2,41.4},{85.4,41.4},{85.6,41.4},{85.8,41.4},{86.0,41.4},{86.2,41.4},{86.4,41.4},{86.6,41.4},{86.8,41.4},{87.0,41.4},{87.2,41.4},{87.4,41.4},{87.6,41.4},{87.8,41.4},{88.0,41.4},{88.2,41.4},{88.4,41.4},{88.6,41.4},{88.8,41.4},{89.0,41.4},{89.2,41.4},{89.4,41.4},{89.6,41.4},{89.8,41.4},{90.0,41.4},{90.2,41.4},{90.4,41.4},{90.6,41.4},{90.8,41.4},{91.0,41.4},{91.2,41.4},{91.4,41.4},{91.6,41.4},{91.8,41.4},{92.0,41.4},{92.2,41.4},{92.4,41.4},{92.6,41.4},{92.8,41.4},{93.0,41.4},{93.2,41.4},{93.4,41.4},{93.6,41.4},{93.8,41.4},{94.0,41.4},{94.2,41.4},{94.4,41.4},{94.6,41.4},{94.8,41.4},{95.0,41.4},{95.2,41.4},{95.4,41.4},{95.6,41.4},{95.8,41.4},{96.0,41.4},{96.2,41.4},{96.4,41.4},{96.6,41.4},{96.8,41.4},{97.0,41.4},{97.2,41.4},{97.4,41.4},{97.6,41.4},{97.8,41.4},{98.0,41.4},{98.2,41.4},{98.4,41.4},{98.6,41.4},{98.8,41.4},{99.0,41.4},{99.2,41.4},{99.4,41.4},{99.6,41.4},{99.8,41.4},{100.0,41.6},{100.2,41.6},{100.4,41.8},{100.6,42.0},{100.6,42.2},{100.8,42.4},{100.8,42.6},{100.8,42.8},{100.8,43.0},{100.8,43.2},{100.8,43.4},{100.8,43.6},{100.8,43.8},{100.8,44.0},{100.8,44.2},{100.8,44.4},{100.8,44.6},{100.8,44.8},{100.8,45.0},{100.8,45.2},{100.8,45.4},{100.8,45.6},{100.8,45.8},{100.8,46.0},{100.8,46.2},{100.8,46.4},{100.8,46.6},{100.8,46.8},{100.8,47.0},{100.8,47.2},{100.8,47.4},{100.8,47.6},{100.8,47.8},{100.8,48.0},{100.8,48.2},{100.8,48.4},{100.8,48.6},{100.8,48.8},{100.8,49.0},{100.8,49.2},{100.8,49.4},{100.8,49.6},{100.8,49.8},{100.8,50.0},{100.8,50.2},{100.8,50.4},{100.8,50.6},{100.8,50.8},{100.8,51.0},{100.8,51.2},{100.8,51.4},{100.8,51.6},{100.8,51.8},{100.8,52.0},{100.8,52.2},{100.8,52.4},{100.8,52.6},{100.8,52.8},{100.8,53.0},{100.8,53.2},{100.8,53.4},{100.8,53.6},{100.8,53.8},{100.8,54.0},{100.8,54.2},{100.8,54.4},{100.8,54.6},{100.8,54.8},{100.8,55.0},{100.8,55.2},{100.8,55.4},{100.8,55.6},{100.8,55.8},{100.8,56.0},{100.8,56.2},{100.8,56.4},{100.8,56.6},{100.8,56.8},{100.8,57.0},{100.8,57.2},{100.8,57.4},{100.8,57.6},{100.8,57.8},{100.8,58.0},{100.8,58.2},{100.8,58.4},{100.8,58.6},{100.8,58.8},{100.8,59.0},{100.8,59.2},{100.8,59.4},{100.8,59.6},{100.8,59.8},{100.8,60.0},{100.8,60.2},{100.8,60.4},{100.6,60.6},{100.6,60.6},{100.4,60.8},{100.2,61.0},{100.0,61.0},{99.8,61.2},{99.6,61.2},{99.4,61.2},{99.2,61.2},{99.0,61.2},{98.8,61.2},{98.6,61.2},{98.4,61.2},{98.2,61.2},{98.0,61.2},{97.8,61.2},{97.6,61.2},{97.4,61.2},{97.2,61.2},{97.0,61.2},{96.8,61.2},{96.6,61.2},{96.4,61.2},{96.2,61.2},{96.0,61.2},{95.8,61.2},{95.6,61.2},{95.4,61.2},{95.2,61.2},{95.0,61.2},{94.8,61.2},{94.6,61.2},{94.4,61.2},{94.2,61.2},{94.0,61.2},{93.8,61.2},{93.6,61.2},{93.4,61.2},{93.2,61.2},{93.0,61.2},{92.8,61.2},{92.6,61.2},{92.4,61.2},{92.2,61.2},{92.0,61.2},{91.8,61.2},{91.6,61.2},{91.4,61.2},{91.2,61.2},{91.0,61.2},{90.8,61.2},{90.6,61.2},{90.4,61.2},{90.2,61.2},{90.0,61.2},{89.8,61.2},{89.6,61.2},{89.4,61.2},{89.2,61.2},{89.0,61.2},{88.8,61.2},{88.6,61.2},{88.4,61.2},{88.2,61.2},{88.0,61.2},{87.8,61.2},{87.6,61.2},{87.4,61.2},{87.2,61.2},{87.0,61.2},{86.8,61.2},{86.6,61.2},{86.4,61.2},{86.2,61.2},{86.0,61.2},{85.8,61.2},{85.6,61.2},{85.4,61.2},{85.2,61.2},{85.0,61.2},{84.8,61.2},{84.6,61.2},{84.4,61.2},{84.2,61.2},{84.0,61.2},{83.8,61.2},{83.6,61.2},{83.4,61.2},{83.2,61.2},{83.0,61.2},{82.8,61.2},{82.6,61.2},{82.4,61.2},{82.2,61.2},{82.0,61.2},{81.8,61.2},{81.6,61.2},{81.4,61.2},{81.2,61.2},{81.0,61.2},{80.8,61.2},{80.6,61.2},{80.4,61.2},{80.2,61.2},{80.0,61.2},{79.8,61.2},{79.6,61.2},{79.4,61.2},{79.2,61.2},{79.0,61.2},{78.8,61.2},{78.6,61.2},{78.4,61.2},{78.2,61.2},{78.0,61.2},{77.8,61.2},{77.6,61.2},{77.4,61.2},{77.2,61.2},{77.0,61.2},{76.8,61.0},{76.6,61.0},{76.4,60.8},{76.2,60.6},{76.2,60.4},{76.0,60.2},{76.0,60.2},{76.0,60.0},{76.0,59.8},{76.0,59.6},{76.0,59.4},{76.0,59.2},{76.0,59.0},{76.0,58.8},{76.0,58.6},{76.0,58.4},{76.0,58.2},{76.0,58.0},{76.0,57.8},{76.0,57.6},{76.0,57.4},{76.0,57.2},{76.0,57.0},{76.0,56.8},{76.0,56.6},{76.0,56.4},{76.0,56.2},{76.0,56.0},{76.0,55.8},{76.0,55.6},{76.0,55.4},{76.0,55.2},{76.0,55.0},{76.0,54.8},{76.0,54.6},{76.0,54.4},{76.0,54.2},{76.0,54.0},{76.0,53.8},{76.0,53.6},{76.0,53.4},{76.0,53.2},{76.0,53.0},{76.0,52.8},{76.0,52.6},{76.0,52.4},{76.0,52.2},{76.0,52.0},{76.0,51.8},{76.0,51.6}};

  //square
  //uint8_t route_array[array_size][2] ={{76.0,51},{76.0,50},{76,49},{76,48},{76,47},{76,46},{76,45},{76,44},{76,43},{76,42},{76,41},{77,41},{78,41},{79,41},{80,41},{81,41},{82,41},{83,41},{84,41},{85,41},{86,41},{87,41},{88,41},{89,41},{90,41},{91,41},{92,41},{93,41},{94,41},{95,41},{96,41},{97,41},{98,41},{99,41},{100,41},{101,41},{101,42},{101,43},{101,44},{101,45},{101,46},{101,47},{101,48},{101,49},{101,50},{101,51},{101,52},{101,53},{101,54},{101,55},{101,56},{101,57},{101,58},{101,59},{101,60},{101,61},{101,62},{100,62},{99,62},{98,62},{97,62},{96,62},{95,62},{94,62},{93,62},{92,62},{91,62},{90,62},{89,62},{88,62},{87,62},{86,62},{85,62},{84,62},{83,62},{82,62},{82,62},{80,62},{79,62},{78,62},{77,62},{76,62},{76,61},{76,60},{76,59},{76,58},{76,57},{76,56},{76,55},{76,54},{76,53},{76,52},{76,51},{76,50}};

  //polygon
  //float route_array[array_size][2] ={{76.2,51.2},{76.2,51.0},{76.4,50.8},{76.4,50.6},{76.6,50.4},{76.6,50.2},{76.8,50.0},{76.8,49.8},{77.0,49.6},{77.0,49.4},{77.2,49.2},{77.2,49.0},{77.4,48.8},{77.4,48.6},{77.6,48.4},{77.6,48.2},{77.8,48.0},{77.8,47.8},{78.0,47.6},{78.0,47.4},{78.2,47.2},{78.2,47.0},{78.4,46.8},{78.4,46.6},{78.6,46.4},{78.6,46.2},{78.8,46.0},{78.8,45.8},{79.0,45.6},{79.0,45.4},{79.2,45.2},{79.2,45.0},{79.4,44.8},{79.4,44.6},{79.6,44.4},{79.6,44.2},{79.8,44.0},{79.8,43.8},{80.0,43.6},{80.0,43.4},{80.2,43.2},{80.2,43.0},{80.4,42.8},{80.4,42.6},{80.6,42.4},{80.6,42.2},{80.8,42.0},{80.8,41.8},{81.0,41.6},{81.0,41.4},{81.2,41.2},{81.2,41.0},{81.4,40.8},{81.4,40.6},{81.6,40.4},{81.6,40.2},{81.8,40.0},{81.8,39.8},{82.0,39.6},{82.0,39.4},{82.2,39.2},{82.2,39.0},{82.4,38.8},{82.6,38.6},{82.4,38.6},{82.6,38.6},{82.8,38.6},{82.8,38.6},{83.0,38.6},{83.2,38.6},{83.4,38.6},{83.6,38.6},{83.8,38.6},{84.0,38.6},{84.2,38.6},{84.4,38.6},{84.6,38.6},{84.8,38.6},{85.0,38.6},{85.2,38.6},{85.4,38.6},{85.6,38.6},{85.8,38.6},{86.0,38.6},{86.2,38.6},{86.4,38.6},{86.6,38.6},{86.8,38.6},{87.0,38.6},{87.2,38.6},{87.4,38.6},{87.6,38.6},{87.8,38.6},{88.0,38.6},{88.2,38.6},{88.4,38.6},{88.6,38.6},{88.8,38.6},{89.0,38.6},{89.2,38.6},{89.4,38.6},{89.6,38.6},{89.8,38.6},{90.0,38.6},{90.2,38.6},{90.4,38.6},{90.6,38.6},{90.8,38.6},{91.0,38.6},{91.2,38.6},{91.4,38.6},{91.6,38.6},{91.8,38.6},{92.0,38.6},{92.2,38.6},{92.4,38.6},{92.6,38.6},{92.8,38.6},{93.0,38.6},{93.2,38.6},{93.4,38.6},{93.6,38.6},{93.8,38.6},{94.0,38.6},{94.2,38.6},{94.4,38.6},{94.6,38.6},{94.8,38.6},{95.0,38.6},{95.2,38.6},{95.2,38.8},{95.4,39.0},{95.4,39.2},{95.6,39.4},{95.6,39.6},{95.8,39.8},{95.8,40.0},{96.0,40.2},{96.0,40.4},{96.2,40.6},{96.2,40.8},{96.4,41.0},{96.4,41.2},{96.6,41.4},{96.6,41.6},{96.8,41.8},{96.8,42.0},{97.0,42.2},{97.0,42.4},{97.2,42.6},{97.2,42.8},{97.4,43.0},{97.4,43.2},{97.6,43.4},{97.6,43.6},{97.8,43.8},{97.8,44.0},{98.0,44.2},{98.0,44.4},{98.2,44.6},{98.2,44.8},{98.4,45.0},{98.4,45.2},{98.6,45.4},{98.6,45.6},{98.8,45.8},{98.8,46.0},{99.0,46.2},{99.0,46.4},{99.2,46.6},{99.2,46.8},{99.4,47.0},{99.4,47.2},{99.6,47.4},{99.6,47.6},{99.8,47.8},{99.8,48.0},{100.0,48.2},{100.0,48.4},{100.2,48.6},{100.2,48.8},{100.4,49.0},{100.4,49.2},{100.6,49.4},{100.6,49.6},{100.8,49.8},{100.8,50.0},{101.0,50.2},{101.0,50.4},{101.2,50.6},{101.2,50.8},{101.4,51.0},{101.4,51.2},{101.6,51.4},{101.4,51.6},{101.4,51.8},{101.2,52.0},{101.2,52.2},{101.0,52.4},{101.0,52.6},{100.8,52.8},{100.8,53.0},{100.6,53.2},{100.6,53.4},{100.4,53.6},{100.4,53.8},{100.2,54.0},{100.2,54.2},{100.0,54.4},{100.0,54.6},{99.8,54.8},{99.8,55.0},{99.6,55.2},{99.6,55.4},{99.4,55.6},{99.4,55.8},{99.2,56.0},{99.2,56.2},{99.0,56.4},{99.0,56.6},{98.8,56.8},{98.8,57.0},{98.6,57.2},{98.6,57.4},{98.4,57.6},{98.4,57.8},{98.2,58.0},{98.2,58.2},{98.0,58.4},{98.0,58.6},{97.8,58.8},{97.8,59.0},{97.6,59.2},{97.6,59.4},{97.4,59.6},{97.4,59.8},{97.2,60.0},{97.2,60.2},{97.0,60.4},{97.0,60.6},{96.8,60.8},{96.8,61.0},{96.6,61.2},{96.6,61.4},{96.4,61.6},{96.4,61.8},{96.2,62.0},{96.2,62.2},{96.0,62.4},{96.0,62.6},{95.8,62.8},{95.8,63.0},{95.6,63.2},{95.6,63.4},{95.4,63.6},{95.4,63.8},{95.2,64.0},{95.0,64.2},{94.8,64.2},{94.6,64.2},{94.4,64.2},{94.2,64.2},{94.0,64.2},{93.8,64.2},{93.6,64.2},{93.4,64.2},{93.2,64.2},{93.0,64.2},{92.8,64.2},{92.6,64.2},{92.4,64.2},{92.2,64.2},{92.0,64.2},{91.8,64.2},{91.6,64.2},{91.4,64.2},{91.2,64.2},{91.0,64.2},{90.8,64.2},{90.6,64.2},{90.4,64.2},{90.2,64.2},{90.0,64.2},{89.8,64.2},{89.6,64.2},{89.4,64.2},{89.2,64.2},{89.0,64.2},{88.8,64.2},{88.6,64.2},{88.4,64.2},{88.2,64.2},{88.0,64.2},{87.8,64.2},{87.6,64.2},{87.4,64.2},{87.2,64.2},{87.0,64.2},{86.8,64.2},{86.6,64.2},{86.4,64.2},{86.2,64.2},{86.0,64.2},{85.8,64.2},{85.6,64.2},{85.4,64.2},{85.2,64.2},{85.0,64.2},{84.8,64.2},{84.6,64.2},{84.4,64.2},{84.2,64.2},{84.0,64.2},{83.8,64.2},{83.6,64.2},{83.4,64.2},{83.2,64.2},{83.0,64.2},{82.8,64.2},{82.6,64.2},{82.4,64.2},{82.4,64.0},{82.2,63.8},{82.2,63.6},{82.0,63.4},{82.0,63.2},{81.8,63.0},{81.8,62.8},{81.6,62.6},{81.6,62.4},{81.4,62.2},{81.4,62.0},{81.2,61.8},{81.2,61.6},{81.0,61.4},{81.0,61.2},{80.8,61.0},{80.8,60.8},{80.6,60.6},{80.6,60.4},{80.4,60.2},{80.4,60.0},{80.2,59.8},{80.2,59.6},{80.0,59.4},{80.0,59.2},{79.8,59.0},{79.8,58.8},{79.6,58.6},{79.6,58.4},{79.4,58.2},{79.4,58.0},{79.2,57.8},{79.2,57.6},{79.0,57.4},{79.0,57.2},{78.8,57.0},{78.8,56.8},{78.6,56.6},{78.6,56.4},{78.4,56.2},{78.4,56.0},{78.2,55.8},{78.2,55.6},{78.0,55.4},{78.0,55.2},{77.8,55.0},{77.8,54.8},{77.6,54.6},{77.6,54.4},{77.4,54.2},{77.4,54.0},{77.2,53.8},{77.2,53.6},{77.0,53.4},{77.0,53.2},{76.8,53.0},{76.8,52.8},{76.6,52.6},{76.6,52.4},{76.4,52.2},{76.4,52.0},{76.2,51.8},{76.2,51.6}};

  //isme2
  //uint8_t route_array[array_size][2] = {{54,50},{55,51},{56,52},{57,53},{58,54},{59,55},{60,55},{61,55},{62,55},{62,54},{61,53},{60,52},{59,51},{58,50},{57,49},{56,48},{55,47},{54,46},{53,45},{53,44},{53,43},{53,42},{54,42},{55,42},{56,42},{57,43},{58,44},{59,45},{60,46},{61,47},{62,48},{63,49},{64,50},{65,51},{66,52},{67,53},{68,54},{69,55},{69,54},{70,55},{71,55},{70,55},{69,54},{68,53},{68,53},{67,52},{68,51},{68,50},{69,49},{69,48},{68,47},{67,46},{66,45},{65,44},{64,43},{63,42},{62,42},{63,43},{64,42},{65,42},{66,42},{67,43},{68,43},{69,44},{70,44},{71,45},{72,46},{73,47},{74,48},{75,49},{76,50},{77,51},{78,52},{79,53},{80,54},{81,54},{82,53},{83,52},{82,51},{81,50},{80,49},{79,48},{78,47},{77,46},{76,45},{75,44},{74,43},{74,42},{75,42},{76,42},{77,43},{78,44},{79,45},{80,46},{81,47},{82,48},{83,49},{84,50},{85,51},{86,52},{87,53},{88,54},{89,54},{90,54},{91,54},{92,53},{91,52},{90,51},{89,50},{88,49},{87,48},{86,47},{85,46},{84,45},{83,44},{82,43},{82,42},{83,42},{84,42},{85,43},{86,44},{87,45},{88,46},{89,47},{90,48},{91,49},{92,50},{93,51},{94,52},{95,53},{96,54},{97,54},{98,54},{99,54},{100,53},{100,52},{99,51},{98,50},{97,49},{96,48},{95,47},{94,46},{93,45},{92,44},{92,43},{92,42},{93,42},{94,42},{95,42},{96,42},{97,42},{98,43},{99,44},{100,45},{101,46},{102,47},{103,48},{104,49},{105,50},{106,51},{107,52},{108,53},{109,54},{110,54},{111,54},{112,54},{113,54},{113,53},{113,52},{112,51},{111,50},{110,49},{109,48},{108,47},{107,47},{106,47},{105,47},{104,47},{103,46},{103,45},{103,44},{103,43},{104,42},{105,42},{106,42},{107,42},{108,42},{109,43},{110,44},{111,45},{112,46},{113,47},{114,48},{115,49},{116,50},{116,51},{116,52},{116,53},{116,54},{116,55},{115,56},{114,57},{113,58},{112,59},{111,60},{110,61},{109,61},{108,61},{107,61},{106,61},{105,61},{104,61},{103,61},{102,61},{101,61},{100,61},{99,61},{98,61},{97,61},{96,61},{95,61},{94,61},{93,61},{92,61},{91,61},{90,61},{89,61},{88,61},{87,61},{86,61},{85,61},{84,61},{83,61},{82,61},{81,61},{80,61},{79,61},{78,61},{77,61},{76,61},{75,61},{74,61},{73,61},{72,61},{71,61},{70,61},{69,61},{68,61},{68,62},{69,62}};

  //float route_array[array_size][2] = {{76.2,51.2},{76.2,51.0},{76.4,50.8},{76.4,50.6},{76.6,50.4},{76.6,50.2},{76.8,50.0},{76.8,49.8},{77.0,49.6},{77.0,49.4},{77.2,49.2},{77.2,49.0},{77.4,48.8},{77.4,48.6},{77.6,48.4},{77.6,48.2},{77.8,48.0},{77.8,47.8},{78.0,47.6},{78.0,47.4},{78.2,47.2},{78.2,47.0},{78.4,46.8},{78.4,46.6},{78.6,46.4},{78.6,46.2},{78.8,46.0},{78.8,45.8},{79.0,45.6},{79.0,45.4},{79.2,45.2},{79.2,45.0},{79.4,44.8},{79.4,44.6},{79.6,44.4},{79.6,44.2},{79.8,44.0},{79.8,43.8},{80.0,43.6},{80.0,43.4},{80.2,43.2},{80.2,43.0},{80.4,42.8},{80.4,42.6},{80.6,42.4},{80.6,42.2},{80.8,42.0},{80.8,41.8},{81.0,41.6},{81.0,41.4},{81.2,41.2},{81.2,41.0},{81.4,40.8},{81.4,40.6},{81.6,40.4},{81.6,40.2},{81.8,40.0},{81.8,39.8},{82.0,39.6},{82.0,39.4},{82.2,39.2},{82.2,39.0},{82.4,38.8},{82.6,38.6}};

  //64 points
  //float route_array[array_size][2] = {{76.2,50},{76.4,50},{76.6,50},{76.8,50},{77,50},{77.2,50},{77.4,50},{77.6,50},{77.8,50},{78,50},{78.2,50},{78.4,50},{78.6,50},{78.8,50},{79,50},{79.2,50},{79.4,50},{79.6,50},{79.8,50},{80,50},{80.2,50},{80.4,50},{80.6,50},{80.8,50},{81,50},{81.2,50},{81.4,50},{81.6,50},{81.8,50},{82,50},{82.2,50},{82.4,50},{82.6,50},{82.8,50},{83,50},{83.2,50},{83.4,50},{83.6,50},{83.8,50},{84,50},{84.2,50},{84.4,50},{84.6,50},{84.8,50},{85,50},{85.2,50},{85.4,50},{85.6,50},{85.8,50},{86,50},{86.2,50},{86.4,50},{86.6,50},{86.8,50},{87,50},{87.2,50},{87.4,50},{87.6,50},{87.8,50},{88,50},{88.2,50},{88.4,50},{88.6,50},{88.8,50},{89,50},{89.2,50},{89.4,50},{89.6,50},{89.8,50},{90,50},{90.2,50},{90.4,50},{90.6,50},{90.8,50},{91,50},{91.2,50},{91.4,50},{91.6,50},{91.8,50},{92,50},{92.2,50},{92.4,50},{92.6,50},{92.8,50},{93,50}};

  //36 points
  //uint8_t route_array[array_size][2] = {{77,50},{78,50},{79,50},{80,50},{81,50},{82,50},{83,50},{84,50},{85,50},{86,50},{87,50},{88,50},{89,50},{90,50},{91,50},{92,50},{93,50},{94,50},{95,50},{94,50},{93,50},{92,50},{91,50},{90,50},{89,50},{88,50},{87,50},{86,50},{85,50},{84,50},{83,50},{82,50},{81,50},{80,50},{79,50},{78,50},{77,50},{76,50}};
  
  // 35 points
  //uint8_t route_array[array_size][2] = {{110,50},{109,50},{108,50},{107,50},{106,50},{105,50},{104,50},{103,50},{102,50},{101,50},{100,50},{99,50},{98,50},{97,50},{96,50},{95,50},{94,50},{93,50},{92,50},{91,50},{90,50},{89,50},{88,50},{87,50},{86,50},{85,50},{84,50},{83,50},{82,50},{81,50},{80,50},{79,50},{78,50},{77,50},{76,50}};

  //uint8_t route_array[array_size][3] = {{77,50,1},{78,50,1},{79,50,1},{80,50,1},{81,50,0},{82,50,0},{83,50,0},{84,50,0},{85,50,1},{86,50,1},{87,50,1},{88,50,1},{89,50,0},{89,50,0},{91,50,0},{92,50,0},{93,50,1},{94,50,1},{95,50,1},{96,50,1}};

  //uint8_t route_array[array_size][3] = {{77,49,1},{78,49,0},{79,49,1},{80,49,0},{81,49,1},{82,49,0},{83,49,1},{84,49,0},{85,49,1},{86,49,0},{87,49,1},{88,49,0},{89,49,1},{90,49,0},{91,49,1},{92,49,0},{93,49,1},{94,49,0},{95,49,1},{96,49,0}};
  
  //uint8_t route_array[array_size][3] = {{51,31,1},{52,32,1},{53,33,1},{54,34,1},{55,35,0},{56,36,0},{57,37,0},{58,38,0},{59,39,1},{60,40,1},{61,41,1},{62,42,1},{63,43,0},{64,44,0},{65,45,0},{66,46,0},{67,47,1},{68,48,1},{69,49,1},{70,50,1}};
  
  uint8_t route_array[array_size][3] = {{51,31,1},{52,32,0},{53,33,1},{54,34,0},{55,35,1},{56,36,0},{57,37,1},{58,38,0},{59,39,1},{60,40,0},{61,41,1},{62,42,0},{63,43,1},{64,44,0},{65,45,1},{66,46,0},{67,47,1},{68,48,0},{69,49,1},{70,50,0}};
  
  int i,j;

  float x = x_start;
  float y = y_start;
  float x_prime, y_prime;
  float L1, L2, L1_prime, L2_prime;
  int lastServoState = PASSING;
  
  for (i=0; i<array_size; i++)
  {
    if(route_array[i][2] != lastServoState){
      toggleServo(lastServoState);
      lastServoState = route_array[i][2];
    }
    
    //Serial.println("Starting from:");
    //Serial.print("x=");
    //Serial.println(x);
    //Serial.print("y=");
    //Serial.println(y);
    
    L1 = returnsL1(x, y, A, B, c, d);
    L2 = returnsL2(x, y, A, B, c, d);

    //Serial.print("L1=");
    //Serial.println(L1);
    //Serial.print("L2=");
    //Serial.println(L2);

    x_prime = route_array[i][0];
    y_prime = route_array[i][1];

    //Serial.println("Going to:");
    //Serial.print("x'=");
    //Serial.println(x_prime);
    //Serial.print("y'=");
    //Serial.println(y_prime);
    
    L1_prime = returnsL1(x_prime, y_prime, A, B, c, d);
    L2_prime = returnsL2(x_prime, y_prime, A, B, c, d);
    
    //Serial.print("L1_prime=");
    //Serial.println(L1_prime);
    //Serial.print("L2_prime=");
    //Serial.println(L2_prime);
    
    float W1 = (L1_prime - L1)/t;  //(L1'-L1)/delta(t) //cm/sec
    float W2 = (L2_prime - L2)/t; //(L2'-L2)/delta(t); //delta(t) = 2 sec

    float max_W1_W2;
    float min_W1_W2;

    float d1, d2;

    if (W1>0 && W2>0)
    {
      direction1 = FORWARD;
      direction2 = FORWARD;

      d1 = 1;
      d2 = 1; 
    }
    
    else if(W1<0 && W2<0)
    {
      direction1 = BACKWARD;
      direction2 = BACKWARD;

      d1 = -1;
      d2 = -1;
    }
    
    else if (W1>0 && W2<0)
    {
      direction1 = FORWARD;
      direction2 = BACKWARD;
      
      d1 = 1;
      d2 = -1;  
    }
    else if (W1<0 && W2>0)
    {
      direction1 = BACKWARD;
      direction2 = FORWARD;

      d1 = -1;
      d2 = 1;
    }
    
    max_W1_W2 = max(abs(W1), abs(W2));
    min_W1_W2 = min(abs(W1), abs(W2));
    
    //driving motors and moving to a certain point 
    float alpha = abs(max_W1_W2/min_W1_W2);
    float n_min = abs(min_W1_W2*t/2/pi/r*stepsPerRevolution);

    float W1_star, W2_star, L1_star, L2_star;

    if (abs(W1) > abs(W2))
    {
       for (j = 0; j < round(n_min) ; j++)
       {
          motor1.step(round(alpha), direction1, DOUBLE);
          motor2.step(1, direction2, DOUBLE);  
       } 
       
       W2_star = round(n_min)*2*pi*r/t/stepsPerRevolution;
       L2_star = L2 + d2 * W2_star * t;
       
       W1_star = round(alpha)*W2_star;
       L1_star = L1 + d1 * W1_star * t; 

       //Serial.println("Reached to:");
       //Serial.print("L1_star=");
       //Serial.println(L1_star);
       //Serial.print("L2_star=");
       //Serial.println(L2_star);
       
       x = returnsX(A, c, L1_star, L2_star);
       y = returnsY(A, B ,c, d, L1_star, L2_star);

       //Serial.print("x_star=");
       //Serial.println(x);
       //Serial.print("y_star=");
       //Serial.println(y);
    }
    else if (abs(W1) < abs(W2))
    {
       for (j = 0; j < round(n_min) ; j++)
       {
         motor1.step(1, direction1 , DOUBLE); 
         motor2.step(round(alpha), direction2, DOUBLE);
       }
       
       W1_star = round(n_min)*2*pi*r/t/stepsPerRevolution;
       L1_star = L1 + d1 * W1_star * t;
       
       W2_star = round(alpha)*W1_star;
       L2_star = L2 + d2 * W2_star * t; 

       //Serial.println("Reached to:");
       //Serial.print("L1_star=");
       //Serial.println(L1_star);
       //Serial.print("L2_star=");
       //Serial.println(L2_star);
    
       x = returnsX(A, c, L1_star, L2_star);
       y = returnsY(A, B, c, d, L1_star, L2_star);

       //Serial.print("x_star=");
       //Serial.println(x);
       //Serial.print("y_star=");
       //Serial.println(y);
    }
    else if(abs(W1) == abs(W2))
    {
       for (j = 0; j < round(n_min) ; j++)
       {
          motor1.step(1, direction1, DOUBLE); 
          motor2.step(1, direction2, DOUBLE);
       }
       
       W1_star = round(n_min)*2*pi*r/t/stepsPerRevolution;
       L1_star = L1 + d1 * W1_star * t;
       
       W2_star = W1_star;
       L2_star = L2 + d2 * W2_star;

       //Serial.println("Reached to:");
       //Serial.print("L1_star=");
       //Serial.println(L1_star);
       //Serial.print("L_2star=");
       //Serial.println(L2_star);

       x = returnsX(A, c, L1_star, L2_star);
       y = returnsY(A, B, c, d, L1_star, L2_star);

       //Serial.print("x_star=");
       //Serial.println(x);
       //Serial.print("y_star=");
       //Serial.println(y);
      
    }
     //Serial.println("****************");
  }
  if (lastServoState != PASSING)
    toggleServo(lastServoState);
}
void loop()
{
  // put your main code here, to run repeatedly:

}
